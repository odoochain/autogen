"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5696],{75343:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var o=t(85893),s=t(11151);const i={custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_inception_function.ipynb",description:"Function Inception: Enable AutoGen agents to update/remove functions during conversations.",source_notebook:"/notebook/agentchat_inception_function.ipynb",tags:["function inception","tool/function"],title:"Auto Generated Agent Chat: Function Inception"},r="Auto Generated Agent Chat: Function Inception",a={id:"notebooks/agentchat_inception_function",title:"Auto Generated Agent Chat: Function Inception",description:"Function Inception: Enable AutoGen agents to update/remove functions during conversations.",source:"@site/docs/notebooks/agentchat_inception_function.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_inception_function",permalink:"/autogen/docs/notebooks/agentchat_inception_function",draft:!1,unlisted:!1,editUrl:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_inception_function.ipynb",tags:[{label:"function inception",permalink:"/autogen/docs/tags/function-inception"},{label:"tool/function",permalink:"/autogen/docs/tags/tool-function"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_inception_function.ipynb",description:"Function Inception: Enable AutoGen agents to update/remove functions during conversations.",source_notebook:"/notebook/agentchat_inception_function.ipynb",tags:["function inception","tool/function"],title:"Auto Generated Agent Chat: Function Inception"},sidebar:"notebooksSidebar",previous:{title:"Generate Dalle Images With Conversable Agents",permalink:"/autogen/docs/notebooks/agentchat_image_generation_capability"},next:{title:"Auto Generated Agent Chat: Task Solving with Langchain Provided Tools as Functions",permalink:"/autogen/docs/notebooks/agentchat_langchain"}},c={},u=[{value:"Requirements",id:"requirements",level:2}];function p(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"auto-generated-agent-chat-function-inception",children:"Auto Generated Agent Chat: Function Inception"}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.a,{href:"https://colab.research.google.com/github/autogenhub/autogen/blob/main/notebook/agentchat_inception_function.ipynb",children:(0,o.jsx)(e.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,o.jsx)(e.a,{href:"https://github.com/autogenhub/autogen/blob/main/notebook/agentchat_inception_function.ipynb",children:(0,o.jsx)(e.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,o.jsxs)(e.p,{children:["AutoGen offers conversable agents powered by LLM, tool or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,o.jsx)(e.a,{href:"https://autogenhub.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,o.jsxs)(e.p,{children:["In this notebook, we demonstrate how to use ",(0,o.jsx)(e.code,{children:"AssistantAgent"})," and\n",(0,o.jsx)(e.code,{children:"UserProxyAgent"})," to give them the ability to auto-extend the list of\nfunctions the model may call. Functions need to be registered to\n",(0,o.jsx)(e.code,{children:"UserProxyAgent"}),", which will be responsible for executing any function\ncalls made by ",(0,o.jsx)(e.code,{children:"AssistantAgent"}),". The assistant also needs to know the\nsignature of functions that may be called. A special ",(0,o.jsx)(e.code,{children:"define_function"}),"\nfunction is registered, which registers a new function in\n",(0,o.jsx)(e.code,{children:"UserProxyAgent"})," and updates the configuration of the assistant."]}),"\n",(0,o.jsx)(e.p,{children:"In the example scenario, the user first asks to define a function that\ngets a URL and prints the response body. Then the user asks to print the\nresponse body, and the assistant suggests to the user to call the new\nfunction."}),"\n",(0,o.jsx)(e.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsxs)(e.p,{children:["AutoGen requires ",(0,o.jsx)(e.code,{children:"Python>=3.8"}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import json\n\nfrom autogen import AssistantAgent, UserProxyAgent, config_list_from_json\nfrom autogen.code_utils import execute_code\n\nconfig_list = config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        # Function calling with GPT 3.5\n        "model": ["gpt-3.5-turbo-16k-0613"],\n    },\n)\nllm_config = {\n    "functions": [\n        {\n            "name": "define_function",\n            "description": "Define a function to add to the context of the conversation. Necessary Python packages must be declared. Once defined, the assistant may decide to use this function, respond with a normal message.",\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "name": {\n                        "type": "string",\n                        "description": "The name of the function to define.",\n                    },\n                    "description": {\n                        "type": "string",\n                        "description": "A short description of the function.",\n                    },\n                    "arguments": {\n                        "type": "string",\n                        "description": \'JSON schema of arguments encoded as a string. For example: { "url": { "type": "string", "description": "The URL", }}\',\n                    },\n                    "packages": {\n                        "type": "string",\n                        "description": "A list of package names imported by the function, and that need to be installed with pip prior to invoking the function. This solves ModuleNotFoundError.",\n                    },\n                    "code": {\n                        "type": "string",\n                        "description": "The implementation in Python. Do not include the function declaration.",\n                    },\n                },\n                "required": ["name", "description", "arguments", "packages", "code"],\n            },\n        },\n    ],\n    "config_list": config_list,\n    "request_timeout": 120,\n}\n\n\ndef define_function(name, description, arguments, packages, code):\n    json_args = json.loads(arguments)\n    function_config = {\n        "name": name,\n        "description": description,\n        "parameters": {"type": "object", "properties": json_args},\n        # TODO Make all arguments required\n        "required": ["url"],\n    }\n    llm_config["functions"] = llm_config["functions"] + [function_config]\n    user_proxy.register_function(function_map={name: lambda **args: execute_func(name, packages, code, **args)})\n    assistant.update_function_signature(function_config, is_remove=False)\n    return f"A function has been added to the context of this conversation.\\nDescription: {description}"\n\n\ndef execute_func(name, packages, code, **args):\n    pip_install = (\n        f"""print("Installing package: {packages}")\\nsubprocess.run(["pip", "-qq", "install", "{packages}"])"""\n        if packages\n        else ""\n    )\n    str = f"""\nimport subprocess\n{pip_install}\nprint("Result of {name} function execution:")\n{code}\nargs={args}\nresult={name}(**args)\nif result is not None: print(result)\n"""\n    print(f"execute_code:\\n{str}")\n    result = execute_code(str)[1]\n    print(f"Result: {result}")\n    return result\n\n\ndef _is_termination_msg(message):\n    """Check if a message is a termination message."""\n    if isinstance(message, dict):\n        message = message.get("content")\n        if message is None:\n            return False\n        return message.rstrip().endswith("TERMINATE")\n\n\nassistant = AssistantAgent(\n    name="chatbot",\n    system_message="""You are an assistant.\n        The user will ask a question.\n        You may use the provided functions before providing a final answer.\n        Only use the functions you were provided.\n        When the answer has been provided, reply TERMINATE.""",\n    llm_config=llm_config,\n)\n\nuser_proxy = UserProxyAgent(\n    "user_proxy",\n    code_execution_config=False,\n    is_termination_msg=_is_termination_msg,\n    default_auto_reply="Reply TERMINATE when the initial request has been fulfilled.",\n    human_input_mode="NEVER",\n)\n\nuser_proxy.register_function(function_map={"define_function": define_function})\n\n# user_proxy.initiate_chat(\n#     assistant, message="What functions do you know about?")\n\nuser_proxy.initiate_chat(\n    assistant,\n    message="Define a function that gets a URL, then prints the response body.\\nReply TERMINATE when the function is defined.",\n)\n\n# user_proxy.initiate_chat(\n#     assistant, message="List functions do you know about.")\n\nuser_proxy.initiate_chat(\n    assistant, message="Print the response body of https://echo.free.beeceptor.com/\\nUse the functions you know about."\n)\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-text",children:'user_proxy (to chatbot):\n\nDefine a function that gets a URL, then prints the response body.\nReply TERMINATE when the function is defined.\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\n***** Suggested function Call: define_function *****\nArguments: \n{\n  "name": "get_url_response_body",\n  "description": "Gets a URL, then prints the response body",\n  "arguments": "{\\"url\\": {\\"type\\": \\"string\\", \\"description\\": \\"The URL\\"}}",\n  "packages": "requests",\n  "code": "import requests\\n\\n\\ndef get_url_response_body(url):\\n    response = requests.get(url)\\n    print(response.text)\\n"\n}\n****************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING FUNCTION define_function...\nuser_proxy (to chatbot):\n\n***** Response from calling function "define_function" *****\nA function has been added to the context of this conversation.\nDescription: Gets a URL, then prints the response body\n************************************************************\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\nuser_proxy (to chatbot):\n\nPrint the response body of https://echo.free.beeceptor.com/\nUse the functions you know about.\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\n***** Suggested function Call: get_url_response_body *****\nArguments: \n{\n  "url": "https://echo.free.beeceptor.com/"\n}\n**********************************************************\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING FUNCTION get_url_response_body...\nexecute_code:\n\nimport subprocess\nprint("Installing package: requests")\nsubprocess.run(["pip", "-qq", "install", "requests"])\nprint("Result of get_url_response_body function execution:")\nimport requests\n\n\ndef get_url_response_body(url):\n    response = requests.get(url)\n    print(response.text)\n\nargs={\'url\': \'https://echo.free.beeceptor.com/\'}\nresult=get_url_response_body(**args)\nif result is not None: print(result)\n\nResult: Installing package: requests\nResult of get_url_response_body function execution:\n{\n  "method": "GET",\n  "path": "/",\n  "ip": "104.28.208.116",\n  "headers": {\n    "host": "echo.free.beeceptor.com",\n    "user-agent": "python-requests/2.31.0",\n    "accept": "*/*",\n    "accept-encoding": "gzip, deflate",\n    "x-forwarded-for": "104.28.208.116",\n    "x-forwarded-host": "echo.free.beeceptor.com",\n    "x-forwarded-proto": "https",\n    "x-real-ip": "104.28.208.116"\n  },\n  "parsedQueryParams": {}\n}\n\nuser_proxy (to chatbot):\n\n***** Response from calling function "get_url_response_body" *****\nInstalling package: requests\nResult of get_url_response_body function execution:\n{\n  "method": "GET",\n  "path": "/",\n  "ip": "104.28.208.116",\n  "headers": {\n    "host": "echo.free.beeceptor.com",\n    "user-agent": "python-requests/2.31.0",\n    "accept": "*/*",\n    "accept-encoding": "gzip, deflate",\n    "x-forwarded-for": "104.28.208.116",\n    "x-forwarded-host": "echo.free.beeceptor.com",\n    "x-forwarded-proto": "https",\n    "x-real-ip": "104.28.208.116"\n  },\n  "parsedQueryParams": {}\n}\n\n******************************************************************\n\n--------------------------------------------------------------------------------\nchatbot (to user_proxy):\n\nThe response body of https://echo.free.beeceptor.com/ is:\n\n{\n  "method": "GET",\n  "path": "/",\n  "ip": "104.28.208.116",\n  "headers": {\n    "host": "echo.free.beeceptor.com",\n    "user-agent": "python-requests/2.31.0",\n    "accept": "*/*",\n    "accept-encoding": "gzip, deflate",\n    "x-forwarded-for": "104.28.208.116",\n    "x-forwarded-host": "echo.free.beeceptor.com",\n    "x-forwarded-proto": "https",\n    "x-real-ip": "104.28.208.116"\n  },\n  "parsedQueryParams": {}\n}\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n'})})]})}function d(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>a,a:()=>r});var o=t(67294);const s={},i=o.createContext(s);function r(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);