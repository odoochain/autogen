"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7803],{96496:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>g});var s=n(85893),i=n(11151);const a={custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_retrieval.ipynb",description:"OpenAI Assistant with retrieval augmentation.",source_notebook:"/notebook/agentchat_oai_assistant_retrieval.ipynb",tags:["RAG","OpenAI Assistant"],title:"RAG OpenAI Assistants in AutoGen"},o="RAG OpenAI Assistants in AutoGen",r={id:"notebooks/agentchat_oai_assistant_retrieval",title:"RAG OpenAI Assistants in AutoGen",description:"OpenAI Assistant with retrieval augmentation.",source:"@site/docs/notebooks/agentchat_oai_assistant_retrieval.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_oai_assistant_retrieval",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_retrieval",draft:!1,unlisted:!1,editUrl:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_retrieval.ipynb",tags:[{label:"RAG",permalink:"/autogen/docs/tags/rag"},{label:"OpenAI Assistant",permalink:"/autogen/docs/tags/open-ai-assistant"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_retrieval.ipynb",description:"OpenAI Assistant with retrieval augmentation.",source_notebook:"/notebook/agentchat_oai_assistant_retrieval.ipynb",tags:["RAG","OpenAI Assistant"],title:"RAG OpenAI Assistants in AutoGen"},sidebar:"notebooksSidebar",previous:{title:"Auto Generated Agent Chat: Group Chat with GPTAssistantAgent",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_groupchat"},next:{title:"OpenAI Assistants in AutoGen",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_twoagents_basic"}},c={},g=[];function l(t){const e={a:"a",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",...(0,i.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"rag-openai-assistants-in-autogen",children:"RAG OpenAI Assistants in AutoGen"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:"https://colab.research.google.com/github/autogenhub/autogen/blob/main/notebook/agentchat_oai_assistant_retrieval.ipynb",children:(0,s.jsx)(e.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,s.jsx)(e.a,{href:"https://github.com/autogenhub/autogen/blob/main/notebook/agentchat_oai_assistant_retrieval.ipynb",children:(0,s.jsx)(e.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,s.jsxs)(e.p,{children:["This notebook shows an example of the\n",(0,s.jsx)(e.a,{href:"https://github.com/autogenhub/autogen/blob/main/autogen/agentchat/contrib/gpt_assistant_agent.py",children:(0,s.jsx)(e.code,{children:"GPTAssistantAgent"})}),"\nwith retrieval augmented generation. ",(0,s.jsx)(e.code,{children:"GPTAssistantAgent"})," is an\nexperimental AutoGen agent class that leverages the ",(0,s.jsx)(e.a,{href:"https://platform.openai.com/docs/assistants/overview",children:"OpenAI Assistant\nAPI"})," for\nconversational capabilities, working with ",(0,s.jsx)(e.code,{children:"UserProxyAgent"})," in AutoGen."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'import logging\nimport os\n\nfrom autogen import UserProxyAgent, config_list_from_json\nfrom autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.WARNING)\n\nassistant_id = os.environ.get("ASSISTANT_ID", None)\n\nconfig_list = config_list_from_json("OAI_CONFIG_LIST")\nllm_config = {\n    "config_list": config_list,\n}\nassistant_config = {\n    "assistant_id": assistant_id,\n    "tools": [{"type": "retrieval"}],\n    "file_ids": ["file-AcnBk5PCwAjJMCVO0zLSbzKP"],\n    # add id of an existing file in your openai account\n    # in this case I added the implementation of conversable_agent.py\n}\n\ngpt_assistant = GPTAssistantAgent(\n    name="assistant",\n    instructions="You are adapt at question answering",\n    llm_config=llm_config,\n    assistant_config=assistant_config,\n)\n\nuser_proxy = UserProxyAgent(\n    name="user_proxy",\n    code_execution_config=False,\n    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],\n    human_input_mode="ALWAYS",\n)\nuser_proxy.initiate_chat(gpt_assistant, message="Please explain the code in this file!")\n\ngpt_assistant.delete_assistant()\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"OpenAI client config of GPTAssistantAgent(assistant) - model: gpt-4-turbo-preview\nGPT Assistant only supports one OpenAI client. Using the first client in the list.\nMatching assistant found, using the first matching assistant: {'id': 'asst_sKUCUXkaXyTidtlyovbqppH3', 'created_at': 1710320924, 'description': None, 'file_ids': ['file-AcnBk5PCwAjJMCVO0zLSbzKP'], 'instructions': 'You are adapt at question answering', 'metadata': {}, 'model': 'gpt-4-turbo-preview', 'name': 'assistant', 'object': 'assistant', 'tools': [ToolRetrieval(type='retrieval')]}\nPermanently deleting assistant...\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"user_proxy (to assistant):\n\nPlease explain the code in this file!\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe code in the file appears to define tests for various functionalities related to a GPT-based assistant agent. Here is a summary of the main components and functionalities described in the visible portion of the code:\n\n1. **Imports and Setup**: The script imports necessary libraries and modules, such as `pytest` for testing, `uuid` for generating unique identifiers, and `openai` along with custom modules like `autogen` and `OpenAIWrapper`. It sets up the system path to include specific directories for importing test configurations and dependencies.\n\n2. **Conditional Test Skipping**: The script includes logic to conditionally skip tests based on the execution environment or missing dependencies. This is done through the `@pytest.mark.skipif` decorator, which conditionally skips test functions based on the `skip` flag, determined by whether certain imports are successful or other conditions are met.\n\n3. **Test Configurations**: The code loads configurations for interacting with the OpenAI API and a hypothetical Azure API (as indicated by the placeholder `azure`), filtering these configurations by certain criteria such as API type and version.\n\n4. **Test Cases**:\n   - **Configuration List Test (`test_config_list`)**: Ensures that the configurations for both OpenAI and the hypothetical Azure API are loaded correctly by asserting the presence of at least one configuration for each.\n   - **GPT Assistant Chat Test (`test_gpt_assistant_chat`)**: Tests the functionality of a GPT Assistant Agent by simulating a chat interaction. It uses a mock function to simulate an external API call and checks if the GPT Assistant properly processes the chat input, invokes the external function, and provides an expected response.\n   - **Assistant Instructions Test (`test_get_assistant_instructions` and related functions)**: These tests verify that instructions can be set and retrieved correctly for a GPTAssistantAgent. It covers creating an agent, setting instructions, and ensuring the set instructions can be retrieved as expected.\n   - **Instructions Overwrite Test (`test_gpt_assistant_instructions_overwrite`)**: Examines whether the instructions for a GPTAssistantAgent can be successfully overwritten by creating a new agent with the same ID but different instructions, with an explicit indication to overwrite the previous instructions.\n\nEach test case aims to cover different aspects of the GPTAssistantAgent's functionality, such as configuration loading, interactive chat behavior, function registration and invocation, and instruction management. The mocks and assertions within the tests are designed to ensure that each component of the GPTAssistantAgent behaves as expected under controlled conditions.\n\n\n--------------------------------------------------------------------------------\nuser_proxy (to assistant):\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n"})})]})}function u(t={}){const{wrapper:e}={...(0,i.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}},11151:(t,e,n)=>{n.d(e,{Z:()=>r,a:()=>o});var s=n(67294);const i={},a=s.createContext(i);function o(t){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function r(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),s.createElement(a.Provider,{value:e},t.children)}}}]);