"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2227],{47664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(85893),i=t(11151);const o={custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_web_info.ipynb",description:"Solve tasks requiring web info.",source_notebook:"/notebook/agentchat_web_info.ipynb",tags:["web","code generation"],title:"Auto Generated Agent Chat: Solving Tasks Requiring Web Info"},s="Auto Generated Agent Chat: Solving Tasks Requiring Web Info",r={id:"notebooks/agentchat_web_info",title:"Auto Generated Agent Chat: Solving Tasks Requiring Web Info",description:"Solve tasks requiring web info.",source:"@site/docs/notebooks/agentchat_web_info.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_web_info",permalink:"/autogen/docs/notebooks/agentchat_web_info",draft:!1,unlisted:!1,editUrl:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_web_info.ipynb",tags:[{label:"web",permalink:"/autogen/docs/tags/web"},{label:"code generation",permalink:"/autogen/docs/tags/code-generation"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_web_info.ipynb",description:"Solve tasks requiring web info.",source_notebook:"/notebook/agentchat_web_info.ipynb",tags:["web","code generation"],title:"Auto Generated Agent Chat: Solving Tasks Requiring Web Info"},sidebar:"notebooksSidebar",previous:{title:"Translating Video audio using Whisper and GPT-3.5-turbo",permalink:"/autogen/docs/notebooks/agentchat_video_transcript_translate_with_whisper"},next:{title:"Web Scraping using Apify Tools",permalink:"/autogen/docs/notebooks/agentchat_webscraping_with_apify"}},c={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Set your API Endpoint",id:"set-your-api-endpoint",level:2},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Example Task: Paper Talk from URL",id:"example-task-paper-talk-from-url",level:2},{value:"Example Task: Chat about Stock Market",id:"example-task-chat-about-stock-market",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"auto-generated-agent-chat-solving-tasks-requiring-web-info",children:"Auto Generated Agent Chat: Solving Tasks Requiring Web Info"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://colab.research.google.com/github/autogenhub/autogen/blob/main/notebook/agentchat_web_info.ipynb",children:(0,a.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,a.jsx)(n.a,{href:"https://github.com/autogenhub/autogen/blob/main/notebook/agentchat_web_info.ipynb",children:(0,a.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen offers conversable agents powered by LLM, tool, or human, which\ncan be used to perform tasks collectively via automated chat. This\nframework allows tool use and human participation through multi-agent\nconversation. Please find documentation about this feature\n",(0,a.jsx)(n.a,{href:"https://autogenhub.github.io/autogen/docs/Use-Cases/agent_chat",children:"here"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["In this notebook, we demonstrate how to use ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," and\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," to perform tasks which require acquiring info from the\nweb: * discuss a paper based on its URL. * discuss about the stock\nmarket."]}),"\n",(0,a.jsxs)(n.p,{children:["Here ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," is an LLM-based agent that can write Python code\n(in a Python coding block) for a user to execute for a given task.\n",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," is an agent which serves as a proxy for a user to\nexecute the code written by ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),". By setting\n",(0,a.jsx)(n.code,{children:"human_input_mode"})," properly, the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," can also prompt the\nuser for feedback to ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),". For example, when\n",(0,a.jsx)(n.code,{children:"human_input_mode"})," is set to \u201cTERMINATE\u201d, the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," will\nexecute the code written by ",(0,a.jsx)(n.code,{children:"AssistantAgent"})," directly and return the\nexecution results (success or failure and corresponding outputs) to\n",(0,a.jsx)(n.code,{children:"AssistantAgent"}),", and prompt the user for feedback when the task is\nfinished. When user feedback is provided, the ",(0,a.jsx)(n.code,{children:"UserProxyAgent"})," will\ndirectly pass the feedback to ",(0,a.jsx)(n.code,{children:"AssistantAgent"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(n.p,{children:["AutoGen requires ",(0,a.jsx)(n.code,{children:"Python>=3.8"}),". To run this notebook example, please\ninstall autogen and docker:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install autogen docker\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# %pip install "autogen" docker\n'})}),"\n",(0,a.jsx)(n.h2,{id:"set-your-api-endpoint",children:"Set your API Endpoint"}),"\n",(0,a.jsxs)(n.p,{children:["The\n",(0,a.jsx)(n.a,{href:"https://autogenhub.github.io/autogen/docs/reference/oai/openai_utils#config_list_from_json",children:(0,a.jsx)(n.code,{children:"config_list_from_json"})}),"\nfunction loads a list of configurations from an environment variable or\na json file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import autogen\n\nconfig_list = autogen.config_list_from_json(\n    "OAI_CONFIG_LIST",\n    filter_dict={\n        "model": ["gpt4", "gpt-4-32k", "gpt-4-32k-0314", "gpt-4-32k-v0314"],\n    },\n)\n\nllm_config = {\n    "timeout": 600,\n    "cache_seed": 42,\n    "config_list": config_list,\n    "temperature": 0,\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"It first looks for environment variable \u201cOAI_CONFIG_LIST\u201d which needs to\nbe a valid json string. If that variable is not found, it then looks for\na json file named \u201cOAI_CONFIG_LIST\u201d. It filters the configs by models\n(you can filter by other keys as well). Only the models with matching\nnames are kept in the list based on the filter condition."}),"\n",(0,a.jsx)(n.p,{children:"The config list looks like the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"config_list = [\n    {\n        'model': 'gpt-4-32k',\n        'api_key': '<your OpenAI API key here>',\n    },\n    {\n        'model': 'gpt4',\n        'api_key': '<your Azure OpenAI API key here>',\n        'base_url': '<your Azure OpenAI API base here>',\n        'api_type': 'azure',\n        'api_version': '2024-02-01',\n    },\n    {\n        'model': 'gpt-4-32k-0314',\n        'api_key': '<your Azure OpenAI API key here>',\n        'base_url': '<your Azure OpenAI API base here>',\n        'api_type': 'azure',\n        'api_version': '2024-02-01',\n    },\n]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can set the value of config_list in any way you prefer. Please refer\nto this\n",(0,a.jsx)(n.a,{href:"https://github.com/autogenhub/autogen/blob/main/notebook/oai_openai_utils.ipynb",children:"notebook"}),"\nfor full code examples of the different methods."]}),"\n",(0,a.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,a.jsxs)(n.p,{children:["We construct the assistant agent and the user proxy agent. We specify\n",(0,a.jsx)(n.code,{children:"human_input_mode"})," as \u201cTERMINATE\u201d in the user proxy agent, which will\nask for human feedback when it receives a \u201cTERMINATE\u201d signal from the\nassistant agent."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# create an AssistantAgent instance named "assistant"\nassistant = autogen.AssistantAgent(\n    name="assistant",\n    llm_config=llm_config,\n)\n# create a UserProxyAgent instance named "user_proxy"\nuser_proxy = autogen.UserProxyAgent(\n    name="user_proxy",\n    human_input_mode="TERMINATE",\n    max_consecutive_auto_reply=10,\n    is_termination_msg=lambda x: x.get("content", "").rstrip().endswith("TERMINATE"),\n    code_execution_config={\n        "work_dir": "web",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    llm_config=llm_config,\n    system_message="""Reply TERMINATE if the task has been solved at full satisfaction.\nOtherwise, reply CONTINUE, or the reason why the task is not solved yet.""",\n)\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example-task-paper-talk-from-url",children:"Example Task: Paper Talk from URL"}),"\n",(0,a.jsxs)(n.p,{children:["We invoke the ",(0,a.jsx)(n.code,{children:"initiate_chat()"})," method of the user proxy agent to start\nthe conversation. When you run the cell below, you will be prompted to\nprovide feedback after the assistant agent sends a \u201cTERMINATE\u201d signal at\nthe end of the message. If you don\u2019t provide any feedback (by pressing\nEnter directly), the conversation will finish. Before the \u201cTERMINATE\u201d\nsignal, the user proxy agent will try to execute the code suggested by\nthe assistant agent on behalf of the user."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# the assistant receives a message from the user, which contains the task description\nuser_proxy.initiate_chat(\n    assistant,\n    message="""\nWho should read this paper: https://arxiv.org/abs/2308.08155\n""",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\n\nWho should read this paper: https://arxiv.org/abs/2306.01337\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nTo determine who should read the paper, we need to first understand the content and context of the paper. We can do this by fetching the abstract of the paper from the provided URL and analyzing it. \n\nHere is a Python script that uses the BeautifulSoup library to scrape the abstract of the paper from the webpage. \n\n```python\n# Python script to scrape the abstract of the paper\n\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_abstract(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    abstract = soup.find('blockquote', attrs={'class': 'abstract mathjax'}).text.strip()\n    return abstract\n\nurl = \"https://arxiv.org/abs/2306.01337\"\nabstract = get_abstract(url)\nprint(abstract)\n```\n\nPlease run this script and provide the output. Based on the abstract, I can suggest who might be interested in reading this paper.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nAbstract:  Employing Large Language Models (LLMs) to address mathematical problems is an\nintriguing research endeavor, considering the abundance of math problems\nexpressed in natural language across numerous science and engineering fields.\nWhile several prior works have investigated solving elementary mathematics\nusing LLMs, this work explores the frontier of using GPT-4 for solving more\ncomplex and challenging math problems. We evaluate various ways of using GPT-4.\nSome of them are adapted from existing work, and one is MathChat, a\nconversational problem-solving framework newly proposed in this work. We\nperform the evaluation on difficult high school competition problems from the\nMATH dataset, which shows the advantage of the proposed conversational\napproach.\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nBased on the abstract, the paper is about using Large Language Models (LLMs), specifically GPT-4, to solve complex mathematical problems. The paper introduces a new conversational problem-solving framework called MathChat and evaluates its performance on difficult high school competition problems from the MATH dataset.\n\nGiven this, the paper would be of interest to the following groups:\n\n1. **Researchers in Artificial Intelligence and Natural Language Processing**: The paper discusses the use of a large language model (GPT-4) for problem-solving, which is a key research area in AI and NLP.\n\n2. **Mathematicians and Math Educators**: The paper focuses on solving complex mathematical problems, so those with a background in mathematics might find the techniques and results interesting.\n\n3. **Data Scientists and Machine Learning Engineers**: These professionals often use models like GPT-4 in their work and might be interested in new applications and techniques.\n\n4. **Students studying AI, NLP, or Mathematics**: The paper could provide valuable insights for these students into how AI can be used in problem-solving.\n\n5. **Developers working on AI-based chatbots or conversational agents**: The paper introduces a new conversational problem-solving framework, which could be of interest to these developers.\n\nPlease note that while the paper is likely to be of interest to these groups, the specific relevance will depend on the individual's specific interests and research needs.\n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-task-chat-about-stock-market",children:"Example Task: Chat about Stock Market"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'user_proxy.initiate_chat(\n    assistant,\n    message="""Show me the YTD gain of 10 largest technology companies as of today.""",\n)\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nShow me the YTD gain of 10 largest technology companies as of today.\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nTo get the YTD gain of the 10 largest technology companies, we need to do the following:\n\n1. Identify the 10 largest technology companies. We can use the list of the largest technology companies by market capitalization. This list can change frequently, so we need to get the latest data. We can use web scraping to get this data from a reliable source.\n\n2. Get the YTD gain for each of these companies. We can use a financial data API to get this data. Yahoo Finance is a popular source for this kind of data.\n\nHere is a Python script that uses the BeautifulSoup library for web scraping and the yfinance library to get data from Yahoo Finance. This script will print the 10 largest technology companies and their YTD gains.\n\n```python\n# filename: ytd_gain.py\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport yfinance as yf\nimport pandas as pd\n\n# Get the list of largest tech companies by market cap\nurl = \"https://companiesmarketcap.com/technology/largest-technology-companies-by-market-cap/\"\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# Find the table with the data\ntable = soup.find('table')\n\n# Get the ticker symbols of the 10 largest companies\ntickers = []\nfor row in table.find_all('tr')[1:11]:  # Skip the header row\n    ticker = row.find_all('td')[1].text\n    tickers.append(ticker)\n\n# Get the YTD gain for each company\nytd_gains = {}\nfor ticker in tickers:\n    ticker_data = yf.Ticker(ticker)\n    hist = ticker_data.history(period=\"ytd\")\n    start_price = hist.iloc[0]['Close']\n    end_price = hist.iloc[-1]['Close']\n    ytd_gain = (end_price - start_price) / start_price * 100\n    ytd_gains[ticker] = ytd_gain\n\n# Print the results\nfor ticker, ytd_gain in ytd_gains.items():\n    print(f\"{ticker}: {ytd_gain:.2f}%\")\n```\n\nTo run this script, save it to a file named `ytd_gain.py`, then run it with the command `python ytd_gain.py`.\n\nPlease note that this script requires the BeautifulSoup, requests, yfinance, and pandas libraries. If you don't have these libraries installed, you can install them with the command `pip install beautifulsoup4 requests yfinance pandas`.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nTraceback (most recent call last):\n  File \"ytd_gain.py\", line 18, in <module>\n    for row in table.find_all('tr')[1:11]:  # Skip the header row\nAttributeError: 'NoneType' object has no attribute 'find_all'\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nI apologize for the error. It seems that the script failed to find the table in the webpage. This could be due to changes in the webpage structure or because the page uses JavaScript to load the table, which BeautifulSoup can't handle.\n\nLet's try a different approach. We'll use the yfinance library to get the data for the 10 largest technology companies. These are currently: Apple (AAPL), Microsoft (MSFT), Alphabet (GOOGL), Amazon (AMZN), Facebook (FB), Tesla (TSLA), Nvidia (NVDA), Paypal (PYPL), Adobe (ADBE), and Netflix (NFLX).\n\nHere's the updated Python script:\n\n```python\n# filename: ytd_gain.py\n\nimport yfinance as yf\n\n# List of the 10 largest tech companies by market cap\ntickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'FB', 'TSLA', 'NVDA', 'PYPL', 'ADBE', 'NFLX']\n\n# Get the YTD gain for each company\nytd_gains = {}\nfor ticker in tickers:\n    ticker_data = yf.Ticker(ticker)\n    hist = ticker_data.history(period=\"ytd\")\n    start_price = hist.iloc[0]['Close']\n    end_price = hist.iloc[-1]['Close']\n    ytd_gain = (end_price - start_price) / start_price * 100\n    ytd_gains[ticker] = ytd_gain\n\n# Print the results\nfor ticker, ytd_gain in ytd_gains.items():\n    print(f\"{ticker}: {ytd_gain:.2f}%\")\n```\n\nTo run this script, save it to a file named `ytd_gain.py`, then run it with the command `python ytd_gain.py`.\n\nPlease note that this script requires the yfinance library. If you don't have this library installed, you can install it with the command `pip install yfinance`.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 1 (execution failed)\nCode output: \nFB: No data found, symbol may be delisted\nTraceback (most recent call last):\n  File \"ytd_gain.py\", line 13, in <module>\n    start_price = hist.iloc[0]['Close']\n  File \"/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py\", line 931, in __getitem__\n    return self._getitem_axis(maybe_callable, axis=axis)\n  File \"/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1566, in _getitem_axis\n    self._validate_integer(key, axis)\n  File \"/home/vscode/.local/lib/python3.9/site-packages/pandas/core/indexing.py\", line 1500, in _validate_integer\n    raise IndexError(\"single positional indexer is out-of-bounds\")\nIndexError: single positional indexer is out-of-bounds\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nI apologize for the error. It seems that the script failed to get the data for Facebook (FB). This could be due to a temporary issue with the Yahoo Finance API.\n\nLet's modify the script to handle this situation. We'll add a try-except block to skip any companies for which we can't get data.\n\nHere's the updated Python script:\n\n```python\n# filename: ytd_gain.py\n\nimport yfinance as yf\n\n# List of the 10 largest tech companies by market cap\ntickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'FB', 'TSLA', 'NVDA', 'PYPL', 'ADBE', 'NFLX']\n\n# Get the YTD gain for each company\nytd_gains = {}\nfor ticker in tickers:\n    try:\n        ticker_data = yf.Ticker(ticker)\n        hist = ticker_data.history(period=\"ytd\")\n        start_price = hist.iloc[0]['Close']\n        end_price = hist.iloc[-1]['Close']\n        ytd_gain = (end_price - start_price) / start_price * 100\n        ytd_gains[ticker] = ytd_gain\n    except IndexError:\n        print(f\"Could not get data for {ticker}\")\n\n# Print the results\nfor ticker, ytd_gain in ytd_gains.items():\n    print(f\"{ticker}: {ytd_gain:.2f}%\")\n```\n\nTo run this script, save it to a file named `ytd_gain.py`, then run it with the command `python ytd_gain.py`.\n\nPlease note that this script requires the yfinance library. If you don't have this library installed, you can install it with the command `pip install yfinance`.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nCould not get data for FB\nAAPL: 46.41%\nMSFT: 37.63%\nGOOGL: 51.13%\nAMZN: 56.22%\nTSLA: 131.46%\nNVDA: 237.68%\nPYPL: -16.49%\nADBE: 59.79%\nNFLX: 43.41%\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe script has successfully fetched the Year-to-Date (YTD) gain for the largest technology companies, except for Facebook (FB). The YTD gains are as follows:\n\n- Apple (AAPL): 46.41%\n- Microsoft (MSFT): 37.63%\n- Alphabet (GOOGL): 51.13%\n- Amazon (AMZN): 56.22%\n- Tesla (TSLA): 131.46%\n- Nvidia (NVDA): 237.68%\n- Paypal (PYPL): -16.49%\n- Adobe (ADBE): 59.79%\n- Netflix (NFLX): 43.41%\n\nUnfortunately, the script could not fetch the data for Facebook (FB). This could be due to a temporary issue with the Yahoo Finance API or the ticker symbol might have changed.\n\nPlease note that these values are subject to change as the stock market fluctuates. \n\nTERMINATE\n\n--------------------------------------------------------------------------------\nuser_proxy (to assistant):\n\nFB -> META\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThank you for the update. Facebook Inc. has indeed rebranded to Meta Platforms Inc. and its ticker symbol has changed from FB to META on the NASDAQ stock exchange.\n\nLet's update the script to reflect this change:\n\n```python\n# filename: ytd_gain.py\n\nimport yfinance as yf\n\n# List of the 10 largest tech companies by market cap\n# Updated Facebook (FB) to Meta Platforms (META)\ntickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA', 'PYPL', 'ADBE', 'NFLX']\n\n# Get the YTD gain for each company\nytd_gains = {}\nfor ticker in tickers:\n    try:\n        ticker_data = yf.Ticker(ticker)\n        hist = ticker_data.history(period=\"ytd\")\n        start_price = hist.iloc[0]['Close']\n        end_price = hist.iloc[-1]['Close']\n        ytd_gain = (end_price - start_price) / start_price * 100\n        ytd_gains[ticker] = ytd_gain\n    except IndexError:\n        print(f\"Could not get data for {ticker}\")\n\n# Print the results\nfor ticker, ytd_gain in ytd_gains.items():\n    print(f\"{ticker}: {ytd_gain:.2f}%\")\n```\n\nTo run this script, save it to a file named `ytd_gain.py`, then run it with the command `python ytd_gain.py`.\n\nPlease note that this script requires the yfinance library. If you don't have this library installed, you can install it with the command `pip install yfinance`.\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> USING AUTO REPLY...\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nAAPL: 46.34%\nMSFT: 37.55%\nGOOGL: 51.08%\nAMZN: 56.17%\nMETA: 133.67%\nTSLA: 131.02%\nNVDA: 237.38%\nPYPL: -16.55%\nADBE: 59.71%\nNFLX: 43.44%\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe script has successfully fetched the Year-to-Date (YTD) gain for the largest technology companies, including Meta Platforms (formerly Facebook). The YTD gains are as follows:\n\n- Apple (AAPL): 46.34%\n- Microsoft (MSFT): 37.55%\n- Alphabet (GOOGL): 51.08%\n- Amazon (AMZN): 56.17%\n- Meta Platforms (META): 133.67%\n- Tesla (TSLA): 131.02%\n- Nvidia (NVDA): 237.38%\n- Paypal (PYPL): -16.55%\n- Adobe (ADBE): 59.71%\n- Netflix (NFLX): 43.44%\n\nPlease note that these values are subject to change as the stock market fluctuates. \n\nTERMINATE\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> NO HUMAN INPUT RECEIVED.\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(67294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);