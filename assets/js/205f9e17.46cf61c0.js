"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1865],{44749:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=e(85893),a=e(11151);const o={custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",description:"Two-agent chat with OpenAI assistants.",source_notebook:"/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",tags:["OpenAI Assistant"],title:"OpenAI Assistants in AutoGen"},i="OpenAI Assistants in AutoGen",c={id:"notebooks/agentchat_oai_assistant_twoagents_basic",title:"OpenAI Assistants in AutoGen",description:"Two-agent chat with OpenAI assistants.",source:"@site/docs/notebooks/agentchat_oai_assistant_twoagents_basic.mdx",sourceDirName:"notebooks",slug:"/notebooks/agentchat_oai_assistant_twoagents_basic",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_twoagents_basic",draft:!1,unlisted:!1,editUrl:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",tags:[{label:"OpenAI Assistant",permalink:"/autogen/docs/tags/open-ai-assistant"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/autogenhub/autogen/edit/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",description:"Two-agent chat with OpenAI assistants.",source_notebook:"/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",tags:["OpenAI Assistant"],title:"OpenAI Assistants in AutoGen"},sidebar:"notebooksSidebar",previous:{title:"RAG OpenAI Assistants in AutoGen",permalink:"/autogen/docs/notebooks/agentchat_oai_assistant_retrieval"},next:{title:"Auto Generated Agent Chat: GPTAssistant with Code Interpreter",permalink:"/autogen/docs/notebooks/agentchat_oai_code_interpreter"}},r={},l=[];function g(t){const n={a:"a",code:"code",h1:"h1",img:"img",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"openai-assistants-in-autogen",children:"OpenAI Assistants in AutoGen"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://colab.research.google.com/github/autogenhub/autogen/blob/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",children:(0,s.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/autogenhub/autogen/blob/main/notebook/agentchat_oai_assistant_twoagents_basic.ipynb",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,s.jsxs)(n.p,{children:["This notebook shows a very basic example of the\n",(0,s.jsx)(n.a,{href:"https://github.com/autogenhub/autogen/blob/main/autogen/agentchat/contrib/gpt_assistant_agent.py",children:(0,s.jsx)(n.code,{children:"GPTAssistantAgent"})}),",\nwhich is an experimental AutoGen agent class that leverages the ",(0,s.jsx)(n.a,{href:"https://platform.openai.com/docs/assistants/overview",children:"OpenAI\nAssistant API"})," for\nconversational capabilities, working with ",(0,s.jsx)(n.code,{children:"UserProxyAgent"})," in AutoGen."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import logging\nimport os\n\nfrom autogen import AssistantAgent, UserProxyAgent, config_list_from_json\nfrom autogen.agentchat.contrib.gpt_assistant_agent import GPTAssistantAgent\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.WARNING)\n\nassistant_id = os.environ.get("ASSISTANT_ID", None)\n\nconfig_list = config_list_from_json("OAI_CONFIG_LIST")\nllm_config = {"config_list": config_list}\n\nassistant_config = {"assistant_id": assistant_id}\n\ngpt_assistant = GPTAssistantAgent(\n    name="assistant",\n    instructions=AssistantAgent.DEFAULT_SYSTEM_MESSAGE,\n    llm_config=llm_config,\n    assistant_config=assistant_config,\n)\n\nuser_proxy = UserProxyAgent(\n    name="user_proxy",\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,\n    },  # Please set use_docker=True if docker is available to run the generated code. Using docker is safer than running the generated code directly.\n    is_termination_msg=lambda msg: "TERMINATE" in msg["content"],\n    human_input_mode="NEVER",\n    max_consecutive_auto_reply=1,\n)\nuser_proxy.initiate_chat(gpt_assistant, message="Print hello world")\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"OpenAI client config of GPTAssistantAgent(assistant) - model: gpt-4-turbo-preview\nGPT Assistant only supports one OpenAI client. Using the first client in the list.\nNo matching assistant found, creating a new assistant\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'user_proxy (to assistant):\n\nPrint hello world\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\n```python\nprint("Hello, world!")\n```\n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \nHello, world!\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nTERMINATE\n\n\n--------------------------------------------------------------------------------\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_id=None, chat_history=[{'content': 'Print hello world', 'role': 'assistant'}, {'content': '```python\\nprint(\"Hello, world!\")\\n```\\n', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\nHello, world!\\n', 'role': 'assistant'}, {'content': 'TERMINATE\\n', 'role': 'user'}], summary='\\n', cost=({'total_cost': 0}, {'total_cost': 0}), human_input=[])\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'user_proxy.initiate_chat(gpt_assistant, message="Write py code to eval 2 + 2", clear_history=True)\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"user_proxy (to assistant):\n\nWrite py code to eval 2 + 2\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\n```python\n# Calculate 2+2 and print the result\nresult = 2 + 2\nprint(result)\n```\n\n\n--------------------------------------------------------------------------------\n\n>>>>>>>> EXECUTING CODE BLOCK 0 (inferred language is python)...\nuser_proxy (to assistant):\n\nexitcode: 0 (execution succeeded)\nCode output: \n4\n\n\n--------------------------------------------------------------------------------\nassistant (to user_proxy):\n\nThe Python code successfully calculated \\(2 + 2\\) and printed the result, which is \\(4\\).\n\nTERMINATE\n\n\n--------------------------------------------------------------------------------\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"ChatResult(chat_id=None, chat_history=[{'content': 'Write py code to eval 2 + 2', 'role': 'assistant'}, {'content': '```python\\n# Calculate 2+2 and print the result\\nresult = 2 + 2\\nprint(result)\\n```\\n', 'role': 'user'}, {'content': 'exitcode: 0 (execution succeeded)\\nCode output: \\n4\\n', 'role': 'assistant'}, {'content': 'The Python code successfully calculated \\\\(2 + 2\\\\) and printed the result, which is \\\\(4\\\\).\\n\\nTERMINATE\\n', 'role': 'user'}], summary='The Python code successfully calculated \\\\(2 + 2\\\\) and printed the result, which is \\\\(4\\\\).\\n\\n\\n', cost=({'total_cost': 0}, {'total_cost': 0}), human_input=[])\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"gpt_assistant.delete_assistant()\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Permanently deleting assistant...\n"})})]})}function u(t={}){const{wrapper:n}={...(0,a.a)(),...t.components};return n?(0,s.jsx)(n,{...t,children:(0,s.jsx)(g,{...t})}):g(t)}},11151:(t,n,e)=>{e.d(n,{Z:()=>c,a:()=>i});var s=e(67294);const a={},o=s.createContext(a);function i(t){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function c(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:i(t.components),s.createElement(o.Provider,{value:n},t.children)}}}]);